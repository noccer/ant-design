import * as React from 'react';
import * as PropTypes from 'prop-types';
import classNames from 'classnames';
import toArray from 'rc-util/lib/Children/toArray';
import omit from 'omit.js';
import BreadcrumbItem from './BreadcrumbItem';
import BreadcrumbSeparator from './BreadcrumbSeparator';
import Menu from '../menu';
import { ConfigConsumer, ConfigConsumerProps } from '../config-provider';
import warning from '../_util/warning';
import { Omit } from '../_util/type';
function getBreadcrumbName(route, params) {
  if (!route.breadcrumbName) {
    return null;
  }
  const paramsKeys = Object.keys(params).join('|');
  const name = route.breadcrumbName.replace(
    new RegExp(`:(${paramsKeys})`, 'g'),
    (replacement, key) => params[key] || replacement,
  );
  return name;
}
function defaultItemRender(route, params, routes, paths) {
  const isLastItem = routes.indexOf(route) === routes.length - 1;
  const name = getBreadcrumbName(route, params);
  return isLastItem ? <span>{name}</span> : <a href={`#/${paths.join('/')}`}>{name}</a>;
}
function filterFragment(children) {
  return toArray(children).map(element => {
    if (React.isValidElement(element) && element.type === React.Fragment) {
      const props = element.props;
      return props.children;
    }
    return element;
  });
}
export default class Breadcrumb extends React.Component {
  static defaultProps = {
    separator: '/',
  };
  static propTypes = {
    prefixCls: PropTypes.string,
    separator: PropTypes.node,
    routes: PropTypes.array,
  };
  componentDidMount() {
    const { props } = this;
    warning(
      !('linkRender' in props || 'nameRender' in props),
      'Breadcrumb',
      '`linkRender` and `nameRender` are removed, please use `itemRender` instead, ' +
        'see: https://u.ant.design/item-render.',
    );
  }
  getPath = (path, params) => {
    path = (path || '').replace(/^\//, '');
    Object.keys(params).forEach(key => {
      path = path.replace(`:${key}`, params[key]);
    });
    return path;
  };
  addChildPath = (paths, childPath = '', params) => {
    const originalPaths = [...paths];
    const path = this.getPath(childPath, params);
    if (path) {
      originalPaths.push(path);
    }
    return originalPaths;
  };
  genForRoutes = ({ routes = [], params = {}, separator, itemRender = defaultItemRender }) => {
    const paths = [];
    return routes.map(route => {
      const path = this.getPath(route.path, params);
      if (path) {
        paths.push(path);
      }
      // generated overlay by route.children
      let overlay = null;
      if (route.children && route.children.length) {
        overlay = (
          <Menu>
            {route.children.map(child => (
              <Menu.Item key={child.breadcrumbName || child.path}>
                {itemRender(child, params, routes, this.addChildPath(paths, child.path, params))}
              </Menu.Item>
            ))}
          </Menu>
        );
      }
      return (
        <BreadcrumbItem overlay={overlay} separator={separator} key={route.breadcrumbName || path}>
          {itemRender(route, params, routes, paths)}
        </BreadcrumbItem>
      );
    });
  };
  renderBreadcrumb = ({ getPrefixCls }) => {
    let crumbs;
    const {
      prefixCls: customizePrefixCls,
      separator,
      style,
      className,
      routes,
      children,
      ...restProps
    } = this.props;
    const prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);
    if (routes && routes.length > 0) {
      // generated by route
      crumbs = this.genForRoutes(this.props);
    } else if (children) {
      crumbs = React.Children.map(filterFragment(children), (element, index) => {
        if (!element) {
          return element;
        }
        warning(
          element.type &&
            (element.type.__ANT_BREADCRUMB_ITEM === true ||
              element.type.__ANT_BREADCRUMB_SEPARATOR === true),
          'Breadcrumb',
          "Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children",
        );
        return React.cloneElement(element, {
          separator,
          key: index, // eslint-disable-line react/no-array-index-key
        });
      });
    }

    return (
      <div
        className={classNames(className, prefixCls)}
        style={style}
        {...omit(restProps, ['itemRender', 'params'])}
      >
        {crumbs}
      </div>
    );
  };
  render() {
    return <ConfigConsumer>{this.renderBreadcrumb}</ConfigConsumer>;
  }
}
